{"version":3,"sources":["FaceMatcher/FaceMatcherForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FaceMatcher","state","userName","isLoading","labeledFaceDescriptors","loadLabelDescriptors","a","async","labels","Promise","all","map","label","imgUrl","faceapi","img","withFaceLandmarks","withFaceDescriptor","fullFaceDescription","Error","faceDescriptors","descriptor","push","validateUser","input","document","getElementById","withFaceDescriptors","fullFaceDescriptions","canvas","$","get","dims","faceMatcher","results","fd","resizedResult","drawDetections","findBestMatch","setTimeout","setState","formatName","undefined","nameStr","replace","toUpperCase","this","monkeyPatch","fetch","Canvas","window","HTMLCanvasElement","Image","HTMLImageElement","createCanvasElement","createElement","createImageElement","then","className","Fragment","id","audio","Component","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8cAmIeA,G,iNA5HbC,MAAQ,CACNC,SAAU,KACVC,WAAW,G,EAGbC,uBAAyB,G,EAqBzBC,qBAAuB,0BAAAC,EAAAC,OAAA,uDACfC,EAAS,CAAC,iBADK,WAAAF,EAAA,MAERG,QAAQC,IACnBF,EAAOG,KAAI,SAAMC,GAAN,qBAAAN,EAAAC,OAAA,uDAEHM,EAFG,UAESD,EAFT,mBAAAN,EAAA,MAGSQ,IAAmBD,IAH5B,cAGHE,EAHG,kBAAAT,EAAA,MAMyBQ,IACdC,GACjBC,oBACAC,sBATM,UAMHC,EANG,6BAYD,IAAIC,MAAJ,gCAAmCP,IAZlC,OAeHQ,EAAkB,CAACF,EAAoBG,YAC7C,EAAKjB,uBAAuBkB,KAC1B,IAAIR,IAA+BF,EAAOQ,IAjBnC,2CAHQ,8E,EA0BvBG,aAAe,oCAAAjB,EAAAC,OAAA,uDACPiB,EAAQC,SAASC,eAAe,SADzB,WAAApB,EAAA,MAEoBQ,IACfU,GACfR,oBACAW,uBALU,OAETC,EAFS,OAOPC,EAASC,EAAE,YAAYC,IAAI,GAC3BC,EAAOlB,IAAwBe,EAAQL,GAAO,GAEtB,GACxBS,EAAc,IAAInB,IACtB,EAAKV,uBAFuB,KAMxB8B,EAAUN,EAAqBjB,KAAI,SAAAwB,GACvC,IAAMC,EAAgBtB,IAAsBqB,EAAIH,GAGhD,OAFAlB,IAAauB,eAAeR,EAAQO,GAE7BH,EAAYK,cAAcH,EAAGd,iBAGvBa,EAAQ,GACrBK,YAAW,WACT,EAAKC,SAAS,CACZtC,SAAU,EAAKuC,WAAWP,EAAQ,GAAGtB,QAAU,KAC/CT,WAAW,MAEZ,KAEH,EAAKqC,SAAS,CACZtC,cAAUwC,EACVvC,WAAW,IAjCF,uC,EAsCfsC,WAAa,SAAAE,GAAO,OAAIA,EAAQC,QAAQ,YAAa,IAAIC,e,4KAlFvDpC,Q,mBACQK,IAAgC,Y,6CAChCA,IAAkC,Y,6CAClCA,IAA8B,Y,8CAC9BA,IAAiC,Y,yBACvCgC,KAAKzC,uB,qCACC,WACNS,IAAYiC,YAAY,CACtBC,MAAOA,MACPC,OAAQC,OAAOC,kBACfC,MAAOF,OAAOG,iBACdC,oBAAqB,kBAAM7B,SAAS8B,cAAc,WAClDC,mBAAoB,kBAAM/B,SAAS8B,cAAc,UAEnD,EAAKhC,gB,KAdCb,I,gBAML+C,K,uFA+EH,OACE,6BAASC,UAAU,aAChBZ,KAAK7C,MAAME,UACV,kBAAC,IAAMwD,SAAP,KACE,kBAAC,IAAD,CAAQC,GAAG,QAAQC,OAAO,EAAOH,UAAU,YAC3C,4BAAQE,GAAG,YACX,6BAASF,UAAU,eAAnB,oCAICZ,KAAK7C,MAAMC,UAAoC,YAAxB4C,KAAK7C,MAAMC,SAUrC,6BAASwD,UAAU,iBACjB,wBAAIA,UAAU,cAAd,WAAoCZ,KAAK7C,MAAMC,UAC/C,6BAASwD,UAAU,eAAnB,+CAXF,kBAAC,IAAMC,SAAP,KACE,6BAASD,UAAU,eAAnB,gCAGA,6BAASA,UAAU,eAAnB,yC,GA7GcI,cCMXC,EARO,WACpB,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5C,SAASC,eAAe,SDmI3C,kBAAmB4C,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.0811b365.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as faceapi from \"face-api.js\";\r\nimport * as $ from \"jquery\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./FaceMatcher.scss\";\r\n\r\nclass FaceMatcher extends Component {\r\n  state = {\r\n    userName: \"NA\",\r\n    isLoading: true\r\n  };\r\n\r\n  labeledFaceDescriptors = [];\r\n\r\n  async componentDidMount() {\r\n    Promise.all([\r\n      await faceapi.loadSsdMobilenetv1Model(\"/models\"),\r\n      await faceapi.loadTinyFaceDetectorModel(\"/models\"),\r\n      await faceapi.loadFaceLandmarkModel(\"/models\"),\r\n      await faceapi.loadFaceRecognitionModel(\"/models\"),\r\n      this.loadLabelDescriptors()\r\n    ]).then(() => {\r\n      faceapi.env.monkeyPatch({\r\n        fetch: fetch,\r\n        Canvas: window.HTMLCanvasElement,\r\n        Image: window.HTMLImageElement,\r\n        createCanvasElement: () => document.createElement(\"canvas\"),\r\n        createImageElement: () => document.createElement(\"img\")\r\n      });\r\n      this.validateUser();\r\n    });\r\n  }\r\n\r\n  loadLabelDescriptors = async () => {\r\n    const labels = [\"/images/ashis\"];\r\n    return await Promise.all(\r\n      labels.map(async label => {\r\n        // fetch image data from urls and convert blob to HTMLImage element\r\n        const imgUrl = `${label}.png`;\r\n        const img = await faceapi.fetchImage(imgUrl);\r\n\r\n        // detect the face with the highest score in the image and compute it's landmarks and face descriptor\r\n        const fullFaceDescription = await faceapi\r\n          .detectSingleFace(img)\r\n          .withFaceLandmarks()\r\n          .withFaceDescriptor();\r\n\r\n        if (!fullFaceDescription) {\r\n          throw new Error(`no faces detected for ${label}`);\r\n        }\r\n\r\n        const faceDescriptors = [fullFaceDescription.descriptor];\r\n        this.labeledFaceDescriptors.push(\r\n          new faceapi.LabeledFaceDescriptors(label, faceDescriptors)\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  validateUser = async () => {\r\n    const input = document.getElementById(\"myVid\") as HTMLCanvasElement;\r\n    let fullFaceDescriptions = await faceapi\r\n      .detectAllFaces(input)\r\n      .withFaceLandmarks()\r\n      .withFaceDescriptors();\r\n\r\n    const canvas = $(\"#overlay\").get(0);\r\n    const dims = faceapi.matchDimensions(canvas, input, true);\r\n\r\n    const maxDescriptorDistance = 0.6;\r\n    const faceMatcher = new faceapi.FaceMatcher(\r\n      this.labeledFaceDescriptors,\r\n      maxDescriptorDistance\r\n    );\r\n\r\n    const results = fullFaceDescriptions.map(fd => {\r\n      const resizedResult = faceapi.resizeResults(fd, dims);\r\n      faceapi.draw.drawDetections(canvas, resizedResult);\r\n      // faceapi.draw.drawFaceLandmarks(canvas, resizedResult);\r\n      return faceMatcher.findBestMatch(fd.descriptor);\r\n    });\r\n\r\n    if (results && results[0]) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          userName: this.formatName(results[0].label) || \"NA\",\r\n          isLoading: false\r\n        });\r\n      }, 1000);\r\n    } else {\r\n      this.setState({\r\n        userName: undefined,\r\n        isLoading: false\r\n      });\r\n    }\r\n  };\r\n\r\n  formatName = nameStr => nameStr.replace(/^.*[\\\\\\/]/, \"\").toUpperCase();\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container\">\r\n        {this.state.isLoading ? (\r\n          <React.Fragment>\r\n            <Webcam id=\"myVid\" audio={false} className=\"videoEl\" />\r\n            <canvas id=\"overlay\" />\r\n            <section className=\"loadingText\">\r\n              Please Wait While we Verfiy You\r\n            </section>\r\n          </React.Fragment>\r\n        ) : !this.state.userName || this.state.userName === \"UNKNOWN\" ? (\r\n          <React.Fragment>\r\n            <section className=\"loadingText\">\r\n              You do not have Permissions.\r\n            </section>\r\n            <section className=\"detailsPage\">\r\n              Kindly Contact the Adminstrator\r\n            </section>\r\n          </React.Fragment>\r\n        ) : (\r\n          <section className=\"verified-page\">\r\n            <h3 className=\"userHeader\">Welcome {this.state.userName}</h3>\r\n            <section className=\"detailsPage\">\r\n              Let's Get Started with the Presentation !!\r\n            </section>\r\n          </section>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default FaceMatcher;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport FaceMatcher from \"./FaceMatcher/FaceMatcherForm\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <FaceMatcher />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}